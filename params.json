{"name":"Cx","tagline":"A scripting language for fun and profit.","body":"The Cx Language\r\n==\r\nA scripting language for fun and profit.<br>\r\n``` cpp\r\nuse io;\t// Standard IO\r\n\r\nio.puts(\"Hello, World!\");\r\n```\r\n\r\nIntro\r\n--\r\n\r\nThe Cx language is designed to be a very simple subset of C++ and C#. What makes Cx unique is the ability to easy extend the language using C++, and Cx. Basic data types can also be extended to add functionality. All data types can be extended by additional class declarations. This makes it easy to define objects in C++ to later extend those objects in Cx without having to recompile the library. For example, the below code will add the function <i><b>is_digit</b></i> to the basic Cx char type.\r\n``` cpp\r\nclass char {\r\n    /*!is_digit - Check if character is decimal digit\r\n       Checks whether \"this\" is a decimal digit character.\r\n       Decimal digits are any of: 0 1 2 3 4 5 6 7 8 9\r\n       @param this : char to test if digit.\r\n       @return true if digit, false if not. */\r\n    bool is_digit() {\r\n        return ((this >= '0') && (this <= '9'));\r\n    }\r\n}\r\n```\r\n\r\nThe added function can then be called as follows:\r\n``` cpp\r\nchar c = '5';\r\nif(c.is_digit)\r\n\t// true\r\nelse\r\n\t// false\r\n```\r\n\r\nThe Cx Virtual Machine (CxVM)\r\n--\r\nThe Cx back-end is a very simple op-code, stack-based processor built from scratch which (very) loosely follows the JVM instruction syntax. CxVM instrucions can be directly emitted from within Cx source.\r\n\r\n``` cpp\r\n\r\nint assembly_example(int i){\r\n\t\r\n\tint a;\r\n\tasm iconst 0x3E8;\t// Load 1000\r\n\tasm istore a;\t\t// a = 1000\r\n\t\r\n\tasm{\r\n\t\ticonst 0b11111111 \t\t// Load 255\r\n\t\tiload a\t\t     \t\t// Load 1000 (a == 1000)\r\n\t\tiadd\t\t\t\t \t// a + 255 = 1255\r\n\t\tiload i\t\t\t \t\t// Load 100 (if i == 100)\r\n\t\tiadd\t\t\t\t \t// 1255 + 100 = 1355\r\n\t\tistore i\t\t\t \t// i = 1355\r\n\t\tiload i          \t\t// Load 1355\r\n\t\tistore assembly_test_0 \t// assembly_test_0 = 1355\r\n\t\tret\t\t\t\t\t\t// return\r\n\t}\r\n}\r\n\r\n// Returns 1355 to the OS\r\nreturn assembly_example(100);\r\n```\r\n\r\nSupported Compilers and Platforms\r\n--\r\n##### 32bit and 64bit\r\n\r\nPopular compilers which support C++11 are used to build the Cx interpreter.\r\n\r\n* clang++\r\n* g++4.7 or later\r\n* VS 2012 express\r\n\r\nCx language features are restricted to the C++11 standard library and will compile on OSX, Linux, and Windows. Any features deemed platform specific will be implemented in dynamic libraries which can be loaded at run-time.\r\n\r\n### Cx Documentation\r\nAll documentation will be posted and updated at the link below. More information may be found in Cx/doc\r\n* [Cx-doc](https://github.com/ahebert/cx/wiki)\r\n\r\n#### Influences\r\n* [Writing Compilers and Interpreters 2nd Edition](http://www.amazon.com/dp/0471113530/ref=cm_sw_r_tw_dp_Trazwb07Z6NRP)\r\n* [The JavaÂ® Virtual Machine Specification](https://docs.oracle.com/javase/specs/jvms/se7/html/)\r\n\r\n### Status\r\nThis project is for educational purposes only and is still in early development.\r\nA working prototype is well underway and current work is focused on the base language.\r\n\r\n### Getting involved\r\n* Why would you?\r\n","google":"UA-65966055-1","note":"Don't delete this file! It's used internally to help with page regeneration."}